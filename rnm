#!/bin/bash

shopt -s extglob

##########################################################################################################
projectName="rnm"
version="1.0.0"
authorName="Jahidul Hamid"
authorEmail="jahidulhamid@yahoo.com"
bugReportURL="http://github.com/neurobin/$projectName/issues"
versionInfo="
Rename Utility $projectName
Version:        $version
Author:         $authorName
Author Email:   $authorEmail
Bug Report:     $bugReportURL
License:        GNU GPL public license v3
"
helpMessage="
************** $projectName $version *******************

Usage: $projectName Directory/File/Path [options]

One of the options of [-ns] or [-nsf] is mandatory

options:

-h, --help: Show help menu

-i   : Starting index
-ifl : Index field length. not occupied field will be
       filled with 0's.

-ns  : Name string
     
-nsf : Name string file. File containing name string (one per line).
-l   : Line number in name string file.

-ss  : Search string
     String that will be used to search for files with matching names.
     Regex is allowed (posix compliant extended regex).
     

-sF  : Fixed search string (not treated as regex).

-dp  : Depth of folder. 0 means unlimited depth i.e all files and subdirectories will
       be included. Other values may be 1 2 3 etc...
       Default depth is 1.
       
-D   : Apply rename on direcotry as well as on files.
       This is a peculier option and slightly confusing to users.
       no subdirectories will be renamed i.e only file and folders on the
       current directory. If only one directory is passed as the argument,
       that directory will be renamed not any file or folder inside that
       directory.
       
-oD  : Apply rename on directory only. 

-y   : Confirm Yes to all

-v   : Version info

-q   : Quiet operation

Technical Terms:

Reserved Index    : Index will be incremented even if 
                    any file is skipped renaming in order
                    to reserve the index for that skipped file
                
Name String       : A string which is parsed to create name for new files.
                    Name sting is parsed by the following rules:
     /i/ in name string will be replaced with index.
     /ir/ in name string will be replaced with reserved index.
     /id/ in name string will be replaced with directory index (index inside a directory).
     /idr/ in name string will be replaced with reserved directory index
     /n/ in name string will be replaced with filename without extention.
     /fn/ in name string will be replaced with full name of the files.
     /l/ in name string will be replaced with line number from list file.
     /dc/ in name string will be replaced with directory count
     
Search String     : A string that is used to search for files with matching
                    filenames against the search string. By default it is
                    a regex if -sF option is not used.
                 
Index Field Length: An integer value defining the field length of index.
                    empty field will be filled with 0's. For example, if
                    the value is 3, then index will be 001, 002, 003, etc..
"
##########################################################################################################
###### Global Variables ###########

singleMode=false
listFile=""
nameString=""
searchString=""
searchStringFile=""
ext=""
opts=('Only this file' 'Not this file' 'Confirm for All' 'Exit')
PS3="Choice: "

quiet=false
index=1
c=1
ln=1
sF=false
allY=false
y=false
ifl=0
dp=1
mvc=0
rd=false
di=1
ir=1
dri=1
dc=1
dirIndex=1
dirReservedIndex=1
dirOnly=false

##########################################################################################################
##########################################################################################################
###### Funtions ############
####

getAbsolutePath(){
shopt -s extglob globstar
    [[ -d $1 && $1 != "" ]] && { cd "$1"; echo "$(pwd -P)"; } || 
    { [[ -d $(dirname "$1") && $1 != "" ]] && cd "$(dirname "$1")" || exit 1; printf "%s\n" "$(pwd -P)/$(basename "$1")"; }
}

showRenameInfo(){
printf "%s\n" "
*****Rename Info*****
Name String        : $nameString
Name String File   : $nameStringFile
Regex (find)       : $searchString
Bash regex         : $bashSearchString
Recurse Depth      : $dp (0 means unlimited)
Index Field Length : $ifl
"
}

trimZeroFromInteger(){
shopt -s extglob
var="$1"
reg="^(-?)0*(.*)"
[[ $var =~ $reg ]]
var="${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
[[ $var == "-" || $var == "" ]] && var=0
echo "$var"
}


##########################################################################################################
########################################### Opt Parse ####################################################

optarr=("$@")
skipcount=false;
posargcount=0;


for((i=0;i<"${#optarr[@]}";i++));do
    if $skipcount;then skipcount=false;continue;fi
    case "${optarr[$i]}" in
        "-y")
        allY=true
        ;;
        "-h"|"--help")
        printf "%s\n" "$helpMessage"
        exit 2
        ;;
        "-v")
        printf "%s\n" "$versionInfo"
        exit 3
        ;;
        "-i")
        c="${optarr[$(($i+1))]}"
        index="$c"
        [[ ! $index =~ ^-?[0-9]+$ ]] && { printf "%s\n" "Index must be an integer" >/dev/stderr;exit 4; }
        index="$(trimZeroFromInteger "$index" )"
        c=$index;ir=$c;
        skipcount=true
        ;;
        "-ifl")
        ifl="${optarr[$(($i+1))]}"
        [[ ! $ifl =~ ^[0-9]+$ ]] && { printf "%s\n" "Index field length must be a positive integer" >/dev/stderr;exit 5; }
        ifl="$(trimZeroFromInteger "$ifl")"
        skipcount=true
        ;;
        "-di")
        di="${optarr[$(($i+1))]}"
        [[ ! $di =~ ^-?[0-9]+$ ]] && { printf "%s\n" "Index must be an integer" >/dev/stderr;exit 6; }
        di="$(trimZeroFromInteger "$di")"
        dri=$di
        dirIndex=$di
        dirReservedIndex=$di
        skipcount=true
        ;;
        "-l")
        ln="${optarr[$(($i+1))]}"
        [[ ! $ln =~ ^[0-9]+$ ]] && { printf "%s\n" "Starting line must be a positive integer" >/dev/stderr;exit 7; }
        ln="$(trimZeroFromInteger "$ln")"
        skipcount=true
        ;;
        "-q")
        quiet=true
        
        ;;
        "-sF")
        sF=true
        
        ;;
        "-ss")
        searchString="${optarr[$(($i+1))]}"
        skipcount=true
        [[ $searchString == "" ]] && { printf "%s\n" "---Search string can't be empty." >/dev/stderr;exit 8; }
        
        ;;
        "-ns")
        nameString="${optarr[$(($i+1))]}"
        skipcount=true
        [[ $nameString == "" ]] && { printf "%s\n" "---Name string can't be empty." >/dev/stderr;exit 9; }
        
        ;;
        "-nsf")
        nameStringFile="${optarr[$(($i+1))]}"
        skipcount=true
        [[ -f $nameStringFile && ! -L $nameStringFile ]] || { printf "%s\n" "---File not found: $nameStringFile" >/dev/stderr;exit 10; }
        
       
        ;;
        "-dp")
        dp="${optarr[$(($i+1))]}"
        skipcount=true
        [[ ! $dp =~ ^[0-9]+$ ]] && { printf "%s\n" "Depth mush be an integer and >=1" >/dev/stderr;exit 11; }
        dp="$(trimZeroFromInteger "$dp")"
        ;;
        "-D")
        rd=true
        ;;
        "-oD")
        dirOnly=true
        ;;
        *)
        filearr+=("${optarr[$i]}")
        ;;
     esac
done

###################################### Opt Parse End #####################################################
##########################################################################################################

[[ "${#filearr[@]}" == "0"  ]] && { printf "%s\n" "---No file/directory path specified" >/dev/stderr; exit 12; }


[[ "$nameString" == "" && "$nameStringFile" == "" ]] && { printf "%s\n" "---One of the options: -ns or -nsf is mandatory" >/dev/stderr; exit 13; } 



##################################### Various checks ###################################################


if [[ $nameStringFile != "" ]];then
    nameStringFile="$(getAbsolutePath "$nameStringFile")"
fi

[[ $searchString == "" ]] && { searchString=".*";bashSearchString=".*"; } || {
if $sF;then 
    searchString="${searchString//\*/\\*}"
    bashSearchString="$searchString"
else
    searchString="[^/]*$searchString[^/]*"
    searchString="${searchString/#\[^\/\]\*^/^}"
    searchString="${searchString/%$\[^\/\]\*/$}"
    bashSearchString="$searchString"
    searchString="${searchString/#^/}"
    searchString=".*/$searchString"
    searchString="${searchString/%$/}"
fi
}



##################################### Various checks End ###################################################

if ! $quiet;then
    showRenameInfo
fi


for dir in "${filearr[@]}";do
if $dirOnly;then [[ ! -d $dir ]] && continue; fi
di=$dirIndex
dri=$dirReservedIndex

###### Checking validity of $dir ############
dir="$(getAbsolutePath "$dir")"
[[ $dir == "" ]] && { printf "%s\n" "---Make sure directory/file path is given and is correct" >/dev/stderr;exit 14; }
[[ -e $dir && ! -L $dir ]] || { printf "%s\n" "---No such file or directory: $dir" >/dev/stderr;exit 15; }
[[ $dir == $(pwd -P) || $dir == $(getAbsolutePath "$BASH_SOURCE") ]] && { printf "%s\n" "---Choose a file/directory path other than the one where the script itself resides" >/dev/stderr;exit 16; }
#echo "$PWD $dir $BASH_SOURCE"
#############################################




###Checking single mode

[[ -f $dir ]] && singleMode=true || { singleMode=false;((dc++)); }


if ! $singleMode && ! $rd && ! $dirOnly;then
 ## Gettings file names
 
 cd "$dir"
 if $sF;then
  if [[ $dp == "0" ]];then
     IFS=$'\n' files=($(find . ! -path .  -name "$searchString"))
  else
     IFS=$'\n' files=($(find . -maxdepth $dp ! -path .  -name "$searchString"))
  fi
 else
  if [[ $dp == "0" ]];then
     IFS=$'\n' files=($(find . ! -path .  -regextype posix-extended -regex "$searchString"))
  else
     IFS=$'\n' files=($(find . -maxdepth $dp ! -path .  -regextype posix-extended -regex "$searchString"))
  fi
 fi
 ####################################### renfn #############################################################
 
 ###Sanitize name string
 nameString="${nameString//\\/}"
 
 ###
 

 if [[ "$nameString" != "" && "$nameStringFile" == "" ]]; then
  
  for file in "${files[@]}";do
    if ! $rd;then [[ ! -f $file ]] && continue; fi
    dir="$(dirname "$file")"
    dir="$(getAbsolutePath "$dir")"
    index="$c"
    if [[ $ifl != "" ]]; then 
        index="$(printf "%0${ifl}d\n" $c)"
        di="$(printf "%0${ifl}d\n" $di)"
        dri="$(printf "%0${ifl}d\n" $dri)"
        ir="$(printf "%0${ifl}d\n" $ir)"
    fi
    fname="${file##*/}"
    fname="${fname//\\/}"
    fnamewe="${fname%.*}"
    name="${nameString//\/idr\//$dri}"
    [[ $nameString == "" ]] && name="$fname"
    name="${name//\/id\//$di}"
    name="${name//\/ir\//$ir}"
    name="${name//\/i\//$index}"
    name="${name//\/n\//$fnamewe}"
    name="${name//\/fn\//$fname}"
    name="${name//\/dc\//$dc}"
    name="${name//\//}"
    name="${name//\\/}"
    if ! $quiet; then printf "%s\t%s\t%s\n" "$dir/${file##*/}" "-->" "$dir/${name}";fi
    if ! $allY;then
        printf "\nConfirm Moving file:\n\n"
        select opt in "${opts[@]}";do
            case "$opt" in
                "Only this file")
                    y=true
                    allY=false
                    break
                    ;;
                "Not this file")
                    y=false
                    allY=false
                    break
                    ;;
                "Confirm for All")
                    allY=true
                    break
                    ;;
                "Exit")
                    exit 17
                    ;;
                *)
                    echo "Invalid option"
                    ;;
                
            esac
        done
        fi
    if ! $allY;then
        if $y; then
            
            if [[ ! -e "$dir/$name" ]]; then  mv "$file" "$dir/$name"; ((mvc++));  else  echo "---Filename confusion occured" >/dev/stderr;exit 18;fi
        else
            ((ir++));((dri++))
            continue
        fi
    else
        
        if [[ ! -e "$dir/$name" ]]; then  mv "$file" "$dir/$name"; ((mvc++));  else  echo "---Filename confusion occured" >/dev/stderr;exit 19;fi
    fi
    ((c++));((di++));((ir++));((dri++));
  done

 fi
 ####################################### renfn end ##########################################################
 
 
 if [[ "$nameStringFile" != "" ]]; then
 
    
    for file in "${files[@]}";do
    
        if ! $rd;then [[ ! -f $file ]] && continue; fi
        dir="$(dirname "$file")"
        dir="$(getAbsolutePath "$dir")"
        fname="$(sed -n "${ln}s/.*/&/p" $nameStringFile || { echo "---sed error"  >/dev/stderr;exit 20; })"
        fname="${fname//\\/}"
        fnamewe="${fname%.*}"
        index="$c"
        if="$ln"
        if [[ $ifl != "" ]];then 
            index="$(printf "%0${ifl}d\n" $c)"
            if="$(printf "%0${ifl}d\n" $ln)"
            di="$(printf "%0${ifl}d\n" $di)"
            dri="$(printf "%0${ifl}d\n" $dri)"
            ir="$(printf "%0${ifl}d\n" $ir)"
        fi
        name="${nameString//\/idr/$dri}"
        [[ $nameString == "" ]] && name="$fname"
        name="${name//\/id\//$di}"
        name="${name//\/ir\//$ir}"
        name="${name//\/i\//$index}"
        name="${name//\/n\//$fnamewe}"
        name="${name//\/fn\//$fname}"
        name="${name//\/dc\//$dc}"
        name="${name//\/l\//$if}"
        name="${name//\//}"
        name="${name//\\/}"
        if ! $quiet; then printf "%s\t%s\t%s\n" "$dir/${file##*/}" "-->" "$dir/${name}";fi
        if ! $allY;then
          printf "\nConfirm Moving file:\n\n"
          select opt in "${opts[@]}";do
            case "$opt" in
                "Only this file")
                    y=true
                    allY=false
                    break
                    ;;
                "Not this file")
                    y=false
                    allY=false
                    break
                    ;;
                "Confirm for All")
                    allY=true
                    break
                    ;;
                "Exit")
                    exit 21
                    ;;
                *)
                    echo "Invalid option"
                    ;;
                
            esac
          done
        fi
        if ! $allY;then
          if $y; then
            
            if [[ ! -e "$dir/$name" ]]; then  mv "$file" "$dir/$name"; ((mvc++));  else  echo "---Filename confusion occured" >/dev/stderr;exit 22;fi
          else
            ((ir++));((dri++));((ln++))
            continue
          fi
        else
        
        if [[ ! -e "$dir/$name" ]]; then  mv "$file" "$dir/$name"; ((mvc++));  else  echo "---Filename confusion occured" >/dev/stderr;exit 23;fi
        fi
       ((ln++));((c++));((di++));((ir++));((dri++));
    done
 
 fi
 
 
### Now single mode
else
    
    di=$c;dri=$ir;
    file="$dir"
    [[ "$(basename "$file")" =~ $bashSearchString ]] || continue
    dir="$(dirname "$file")"
    dir="$(getAbsolutePath "$dir")"
    if [[ "$nameString" != "" && "$nameStringFile" == "" ]]; then
        index="$c"
        if [[ $ifl != "" ]]; then 
            index="$(printf "%0${ifl}d\n" $c)"
            di="$(printf "%0${ifl}d\n" $di)"
            dri="$(printf "%0${ifl}d\n" $dri)"
            ir="$(printf "%0${ifl}d\n" $ir)"
        fi
        fname="${file##*/}"
        fname="${fname//\\/}"
        fnamewe="${fname%.*}"
        name="${nameString//\/idr\//$dri}"
        [[ $nameString == "" ]] && name="$fname"
        name="${name//\/id\//$di}"
        name="${name//\/ir\//$ir}"
        name="${name//\/i\//$index}"
        name="${name//\/n\//$fnamewe}"
        name="${name//\/fn\//$fname}"
        name="${name//\/dc\//$dc}"
        #name="$(echo $nameString | sed "s:/i/:$index:g;s:/id/:$di:g;s:/ir/:$ir:g;s:/n/:$fnamewe:g;s:/fn/:$fname:g;s:/idr/:$dri:g;s:^$:$fname:g;s:/dc/:$dc:g")"
        name="${name//\//}"
        name="${name//\\/}"
        if ! $quiet; then printf "%s\t%s\t%s\n" "$dir/${file##*/}" "-->" "$dir/${name}";fi
        if ! $allY;then
          printf "\nConfirm Renaming file:\n\n"
          select opt in "${opts[@]}";do
            case "$opt" in
                "Only this file")
                    y=true
                    allY=false
                    break
                    ;;
                "Not this file")
                    y=false
                    allY=false
                    break
                    ;;
                "Confirm for All")
                    allY=true
                    break
                    ;;
                "Exit")
                    exit 24
                    ;;
                *)
                    echo "Invalid option"
                    ;;
                
            esac
          done
        fi
        if ! $allY;then
          if $y; then
            if [[ ! -e "$dir/$name" ]]; then  mv "$file" "$dir/$name"; ((mvc++));  else  echo "---Filename confusion occured" >/dev/stderr;exit 25;fi
          else
            ((ir++));((dri++))
            continue
          fi
        else
        if [[ ! -e "$dir/$name" ]]; then  mv "$file" "$dir/$name"; ((mvc++));  else  echo "---Filename confusion occured" >/dev/stderr;exit 26;fi
        fi
        ((c++));((di++));((ir++));((dri++));
    
    fi
    
    
    if [[ "$nameStringFile" != "" ]]; then
        fname="$(sed -n "${ln}s/.*/&/p" $nameStringFile || { echo "---sed error"  >/dev/stderr;exit 27; })"
        fname="${fname//\\/}"
        fnamewe="${fname%.*}"
        index="$c"
        if="$ln"
        if [[ $ifl != "" ]];then 
            index="$(printf "%0${ifl}d\n" $c)"
            if="$(printf "%0${ifl}d\n" $ln)"
            di="$(printf "%0${ifl}d\n" $di)"
            dri="$(printf "%0${ifl}d\n" $dri)"
            ir="$(printf "%0${ifl}d\n" $ir)"
        fi
        name="${nameString//\/idr\//$dri}"
        [[ $nameString == "" ]] && name="$fname"
        name="${name//\/id\//$di}"
        name="${name//\/ir\//$ir}"
        name="${name//\/i\//$index}"
        name="${name//\/n\//$fnamewe}"
        name="${name//\/fn\//$fname}"
        name="${name//\/dc\//$dc}"
        name="${name//\/l\//$if}"
        name="${name//\//}"
        name="${name//\\/}"
        if ! $quiet; then printf "%s\t%s\t%s\n" "$dir/${file##*/}" "-->" "$dir/${name}";fi
        if ! $allY;then
          printf "\nConfirm Renaming file:\n\n"
          select opt in "${opts[@]}";do
            case "$opt" in
                "Only this file")
                    y=true
                    allY=false
                    break
                    ;;
                "Not this file")
                    y=false
                    allY=false
                    break
                    ;;
                "Confirm for All")
                    allY=true
                    break
                    ;;
                "Exit")
                    exit 28
                    ;;
                *)
                    echo "Invalid option"
                    ;;
                
            esac
          done
        fi
        if ! $allY;then
          if $y; then
            if [[ ! -e "$dir/$name" ]]; then  mv "$file" "$dir/$name"; ((mvc++));  else  echo "---Filename confusion occured" >/dev/stderr;exit 29;fi
          else
            ((ir++));((dri++));((ln++))
            continue
          fi
        else
            if [[ ! -e "$dir/$name" ]]; then  mv "$file" "$dir/$name"; ((mvc++));  else  echo "---Filename confusion occured" >/dev/stderr;exit 30;fi
        fi
        ((ln++));((c++));((di++));((ir++));((dri++));
    fi

 
 
fi

done

if ! $quiet;then
printf "%s\n" "
*** $mvc file/s renamed ***
"
fi
